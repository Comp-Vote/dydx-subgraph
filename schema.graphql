type User @entity {
  "ID attribute is user public key"
  id: ID!
  totalTokens: BigInt!
  totalStakedTokens: BigInt!
  votingPower: BigInt!
  proposingPower: BigInt!
  tokenVotingPower: BigInt!
  tokenProposingPower: BigInt!
  stakedTokenVotingPower: BigInt!
  stakedTokenProposingPower: BigInt!

  "Number of proposals voted on"
  numberVotes: Int!
}

type Proposal @entity {
  "ID attribute is proposal ID"
  id: ID!

  "User that proposed the change"
  proposer: User!

  "Targets data for the change"
  targets: [Bytes!]

  "Values data for the change"
  values: [BigInt!]

  "Signature data for the change"
  signatures: [String!]

  "Call data for the change"
  calldatas: [Bytes!]

  "With delegate calls param from event"
  withDelegateCalls: [Boolean!]

  "Block number proposal was created in"
  creationBlock: BigInt!

  "Timestamp of block proposal was created in"
  creationTime: BigInt!

  "Block number from where the voting starts"
  startBlock: BigInt!

  "Block number from where the voting ends"
  endBlock: BigInt!

  "Once the proposal is queued for execution it will have an ETA of the execution"
  executionETA: BigInt

  "Block that proposal was queued"
  queuedBlock: BigInt

  "Timestamp of block that proposal was queued"
  queuedTime: BigInt

  "The strategy used for the proposal"
  strategy: Bytes!

  "IPFS hash of proposal description"
  ipfsHash: Bytes!

  "Block number proposal was executed in"
  executionBlock: BigInt

  "Timestamp of block proposal was executed in"
  executionTime: BigInt

  "Block number proposal was canceled in"
  cancellationBlock: BigInt

  "Timestamp of block proposal was canceled in"
  cancellationTime: BigInt

  "Votes associated to this proposal"
  votes: [ProposalVote!]! @derivedFrom(field: "proposal")
}

type ProposalVote @entity {
  "ID attribute is a function of user ID and proposal ID, e.g. {user.id}-{proposal.id}"
  id: ID!
  proposal: Proposal!
  user: User!
  support: Boolean!
  votingPower: BigInt!
}

type RewardsClaimed @entity {
  "ID attribute is a function of user ID and rewards claim number at the time of claiming, e.g. {user.id}-{incentivesModule}-{claimTimestamp}"
  id: ID!
  user: User!
  incentivesModule: IncentivesModule!
  claimTimestamp: BigInt!
  rewards: BigInt!
}

enum IncentivesModule {
  MerkleDistributor
  SafetyModule
  LiquidityStaking
}
